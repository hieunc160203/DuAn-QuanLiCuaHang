/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.quanly.giaodich;

import dao.DonViTinhDAO;
import dao.NguoiDungDAO;
import dao.NhaCungCapDAO;
import dao.NhomHangDAO;
import dao.PhieuNhapChiTietDAO;
import dao.PhieuNhapDAO;
import dao.SanPhamDAO;
import helper.DateHelper;
import helper.DialogHelper;
import helper.ShareHelper;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import model.DonViTinh;
import model.NhaCungCap;
import model.NhomHang;
import model.PhieuNhap;
import model.PhieuNhapChiTiet;
import model.SanPham;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.NguoiDung;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class ThemMoiPhieuNhapJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ThemMoiPhieuNhapJFrame
     */
    public ThemMoiPhieuNhapJFrame() {
        initComponents();
        inIt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btg_LoaiPhieuHuy = new javax.swing.ButtonGroup();
        pnl_CotTrai = new javax.swing.JPanel();
        tab_ChiTietPhieu = new javax.swing.JTabbedPane();
        pnl_DonHang = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_ChiTietPhieuNhap = new javax.swing.JTable();
        btn_CapNhatDanhSach = new javax.swing.JButton();
        btn_XoaDanhSach = new javax.swing.JButton();
        pnl_DanhSachSanPham = new javax.swing.JPanel();
        cmb_NhomHang = new javax.swing.JComboBox<>();
        txt_TimKiemSanPham = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_DanhSachSanPham = new javax.swing.JTable();
        pnl_CotPhai = new javax.swing.JPanel();
        btn_NhapHang = new javax.swing.JButton();
        lbl_MaChungTu = new javax.swing.JLabel();
        txt_MaChungTu = new javax.swing.JTextField();
        lbl_NgayHuy = new javax.swing.JLabel();
        dat_NgayNhap = new com.toedter.calendar.JDateChooser();
        lbl_ChietKhau = new javax.swing.JLabel();
        lbl_ThanhTien = new javax.swing.JLabel();
        txt_ThanhTien = new javax.swing.JTextField();
        lbl_MaNhanVien = new javax.swing.JLabel();
        txt_MaNhanVien = new javax.swing.JTextField();
        lbl_TongSoLuong = new javax.swing.JLabel();
        txt_TongSoLuong = new javax.swing.JTextField();
        lbl_NCC = new javax.swing.JLabel();
        cmb_NhaCungCap = new javax.swing.JComboBox<>();
        txt_ChietKhau = new javax.swing.JTextField();
        chk_VAT = new javax.swing.JCheckBox();
        lbl_TongCong = new javax.swing.JLabel();
        txt_TongCong = new javax.swing.JTextField();
        lbl_GhiChu = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txa_GhiChu = new javax.swing.JTextArea();
        btn_XuatFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("THÊM MỚI PHIẾU NHẬP");
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 768));

        pnl_CotTrai.setBackground(new java.awt.Color(255, 255, 255));

        tab_ChiTietPhieu.setBackground(new java.awt.Color(204, 255, 204));
        tab_ChiTietPhieu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        pnl_DonHang.setBackground(new java.awt.Color(204, 204, 255));
        pnl_DonHang.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, null, new java.awt.Color(153, 153, 153)));

        tbl_ChiTietPhieuNhap.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tbl_ChiTietPhieuNhap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Mã SP", "Tên SP", "ĐVT", "HSD Mới", "SL", "Giá nhập", "Thành tiền", "Vốn trước điều chỉnh", "Vốn sau điều chỉnh"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_ChiTietPhieuNhap.setRowHeight(35);
        tbl_ChiTietPhieuNhap.setRowMargin(3);
        tbl_ChiTietPhieuNhap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_ChiTietPhieuNhapMouseClicked(evt);
            }
        });
        tbl_ChiTietPhieuNhap.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbl_ChiTietPhieuNhapPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_ChiTietPhieuNhap);

        btn_CapNhatDanhSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refreshGioHang.png"))); // NOI18N
        btn_CapNhatDanhSach.setToolTipText("Cập nhật lại phiếu kiểm");
        btn_CapNhatDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_CapNhatDanhSachMouseEntered(evt);
            }
        });
        btn_CapNhatDanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CapNhatDanhSachActionPerformed(evt);
            }
        });

        btn_XoaDanhSach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/removeGioHang.png"))); // NOI18N
        btn_XoaDanhSach.setToolTipText("Xoá các sản phẩm trong phiếu");
        btn_XoaDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_XoaDanhSachMouseEntered(evt);
            }
        });
        btn_XoaDanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_XoaDanhSachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_DonHangLayout = new javax.swing.GroupLayout(pnl_DonHang);
        pnl_DonHang.setLayout(pnl_DonHangLayout);
        pnl_DonHangLayout.setHorizontalGroup(
            pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DonHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DonHangLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_XoaDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_CapNhatDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnl_DonHangLayout.setVerticalGroup(
            pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DonHangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_DonHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_CapNhatDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_XoaDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        tab_ChiTietPhieu.addTab("Chi tiết phiếu", pnl_DonHang);

        pnl_DanhSachSanPham.setBackground(new java.awt.Color(255, 255, 204));
        pnl_DanhSachSanPham.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 153, 153)));

        cmb_NhomHang.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmb_NhomHang.setMaximumRowCount(20);

        txt_TimKiemSanPham.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TimKiemSanPham.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_TimKiemSanPhamKeyPressed(evt);
            }
        });

        tbl_DanhSachSanPham.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tbl_DanhSachSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Mã sản phẩm", "Tên sản phẩm", "Nhà cung cấp", "Tồn kho", "Giá vốn", "Giá bán"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_DanhSachSanPham.setRowHeight(35);
        tbl_DanhSachSanPham.setRowMargin(3);
        tbl_DanhSachSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_DanhSachSanPhamMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_DanhSachSanPham);

        javax.swing.GroupLayout pnl_DanhSachSanPhamLayout = new javax.swing.GroupLayout(pnl_DanhSachSanPham);
        pnl_DanhSachSanPham.setLayout(pnl_DanhSachSanPhamLayout);
        pnl_DanhSachSanPhamLayout.setHorizontalGroup(
            pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                        .addComponent(cmb_NhomHang, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_TimKiemSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnl_DanhSachSanPhamLayout.setVerticalGroup(
            pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DanhSachSanPhamLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnl_DanhSachSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmb_NhomHang)
                    .addComponent(txt_TimKiemSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tab_ChiTietPhieu.addTab("Danh sách sản phẩm", pnl_DanhSachSanPham);

        javax.swing.GroupLayout pnl_CotTraiLayout = new javax.swing.GroupLayout(pnl_CotTrai);
        pnl_CotTrai.setLayout(pnl_CotTraiLayout);
        pnl_CotTraiLayout.setHorizontalGroup(
            pnl_CotTraiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotTraiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_ChiTietPhieu)
                .addContainerGap())
        );
        pnl_CotTraiLayout.setVerticalGroup(
            pnl_CotTraiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotTraiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_ChiTietPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_NhapHang.setBackground(new java.awt.Color(255, 51, 0));
        btn_NhapHang.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_NhapHang.setForeground(new java.awt.Color(255, 255, 255));
        btn_NhapHang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconThemSanPham.png"))); // NOI18N
        btn_NhapHang.setText("NHẬP HÀNG");
        btn_NhapHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_NhapHangMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_NhapHangMouseExited(evt);
            }
        });
        btn_NhapHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_NhapHangActionPerformed(evt);
            }
        });

        lbl_MaChungTu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_MaChungTu.setText("Mã chứng từ");

        txt_MaChungTu.setEditable(false);
        txt_MaChungTu.setBackground(new java.awt.Color(255, 255, 204));
        txt_MaChungTu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_MaChungTu.setFocusable(false);
        txt_MaChungTu.setRequestFocusEnabled(false);

        lbl_NgayHuy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_NgayHuy.setText("Ngày nhập");

        dat_NgayNhap.setDateFormatString("dd-MM-yyyy");
        dat_NgayNhap.setEnabled(false);
        dat_NgayNhap.setFocusable(false);
        dat_NgayNhap.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dat_NgayNhap.setRequestFocusEnabled(false);

        lbl_ChietKhau.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_ChietKhau.setText("Chiết khấu %");

        lbl_ThanhTien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_ThanhTien.setText("Thành tiền");

        txt_ThanhTien.setEditable(false);
        txt_ThanhTien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_ThanhTien.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_ThanhTien.setText("0");

        lbl_MaNhanVien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_MaNhanVien.setText("Mã nhân viên");

        txt_MaNhanVien.setEditable(false);
        txt_MaNhanVien.setBackground(new java.awt.Color(255, 255, 204));
        txt_MaNhanVien.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_MaNhanVien.setFocusable(false);
        txt_MaNhanVien.setRequestFocusEnabled(false);

        lbl_TongSoLuong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_TongSoLuong.setText("Tổng số lượng");

        txt_TongSoLuong.setEditable(false);
        txt_TongSoLuong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TongSoLuong.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_TongSoLuong.setText("0");

        lbl_NCC.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_NCC.setText("Nhà cung cấp");

        cmb_NhaCungCap.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txt_ChietKhau.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_ChietKhau.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_ChietKhau.setText("0");
        txt_ChietKhau.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_ChietKhauFocusLost(evt);
            }
        });
        txt_ChietKhau.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_ChietKhauKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_ChietKhauKeyTyped(evt);
            }
        });

        chk_VAT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chk_VAT.setText("VAT");
        chk_VAT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_VATItemStateChanged(evt);
            }
        });

        lbl_TongCong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_TongCong.setText("Tổng cộng");

        txt_TongCong.setEditable(false);
        txt_TongCong.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_TongCong.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_TongCong.setText("0");

        lbl_GhiChu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_GhiChu.setText("Ghi chú");
        lbl_GhiChu.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txa_GhiChu.setColumns(20);
        txa_GhiChu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txa_GhiChu.setRows(3);
        txa_GhiChu.setTabSize(5);
        jScrollPane1.setViewportView(txa_GhiChu);

        btn_XuatFile.setBackground(new java.awt.Color(51, 51, 255));
        btn_XuatFile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_XuatFile.setForeground(new java.awt.Color(255, 255, 255));
        btn_XuatFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/iconExcel2.png"))); // NOI18N
        btn_XuatFile.setText("XUẤT FILE");
        btn_XuatFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_XuatFileMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_XuatFileMouseExited(evt);
            }
        });
        btn_XuatFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_XuatFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_CotPhaiLayout = new javax.swing.GroupLayout(pnl_CotPhai);
        pnl_CotPhai.setLayout(pnl_CotPhaiLayout);
        pnl_CotPhaiLayout.setHorizontalGroup(
            pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                        .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_GhiChu)
                            .addComponent(lbl_TongCong))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_CotPhaiLayout.createSequentialGroup()
                        .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbl_TongSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbl_ThanhTien)
                                    .addComponent(lbl_ChietKhau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(19, 19, 19)
                                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_TongSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txt_ThanhTien, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txt_TongCong, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                                            .addComponent(txt_ChietKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                                            .addComponent(chk_VAT))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbl_MaChungTu)
                                .addComponent(txt_MaChungTu, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_MaNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_MaNhanVien)
                                .addComponent(lbl_NgayHuy)
                                .addComponent(dat_NgayNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_NCC)
                                .addComponent(cmb_NhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))))
            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btn_NhapHang, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btn_XuatFile, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnl_CotPhaiLayout.setVerticalGroup(
            pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_CotPhaiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_MaNhanVien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_MaNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_MaChungTu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_MaChungTu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_NgayHuy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dat_NgayNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_NCC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmb_NhaCungCap, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_TongSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_TongSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_ThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ChietKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_ChietKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chk_VAT))
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_TongCong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_TongCong, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_GhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_CotPhaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_NhapHang, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_XuatFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnl_CotTrai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_CotPhai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_CotTrai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_CotPhai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_NhapHangMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_NhapHangMouseEntered
        // TODO add your handling code here:
        btn_NhapHang.setBackground(Color.yellow);
        btn_NhapHang.setForeground(Color.blue);
        btn_NhapHang.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_NhapHangMouseEntered

    private void btn_NhapHangMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_NhapHangMouseExited
        // TODO add your handling code here:
        btn_NhapHang.setBackground(new Color(255, 51, 0));
        btn_NhapHang.setForeground(Color.white);
    }//GEN-LAST:event_btn_NhapHangMouseExited

    private void btn_NhapHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_NhapHangActionPerformed
        // TODO add your handling code here:
        themPhieuNhap();
    }//GEN-LAST:event_btn_NhapHangActionPerformed

    private void tbl_ChiTietPhieuNhapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_ChiTietPhieuNhapMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            xoaSanPham();
        }
    }//GEN-LAST:event_tbl_ChiTietPhieuNhapMouseClicked

    private void tbl_ChiTietPhieuNhapPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbl_ChiTietPhieuNhapPropertyChange
        // TODO add your handling code here:
        nhapThongTinNhapHang();
    }//GEN-LAST:event_tbl_ChiTietPhieuNhapPropertyChange

    private void txt_TimKiemSanPhamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_TimKiemSanPhamKeyPressed
        // TODO add your handling code here:
        timSanPham();
    }//GEN-LAST:event_txt_TimKiemSanPhamKeyPressed

    private void tbl_DanhSachSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_DanhSachSanPhamMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            themSanPham();
        }
    }//GEN-LAST:event_tbl_DanhSachSanPhamMouseClicked

    private void btn_CapNhatDanhSachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CapNhatDanhSachMouseEntered
        // TODO add your handling code here:
        btn_CapNhatDanhSach.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_CapNhatDanhSachMouseEntered

    private void btn_XoaDanhSachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XoaDanhSachMouseEntered
        // TODO add your handling code here:
        btn_XoaDanhSach.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_XoaDanhSachMouseEntered

    private void btn_CapNhatDanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CapNhatDanhSachActionPerformed
        // TODO add your handling code here:
        nhapThongTinNhapHang();
    }//GEN-LAST:event_btn_CapNhatDanhSachActionPerformed

    private void btn_XoaDanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_XoaDanhSachActionPerformed
        // TODO add your handling code here:
        xoaDanhSachNhap();
    }//GEN-LAST:event_btn_XoaDanhSachActionPerformed

    private void btn_XuatFileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XuatFileMouseEntered
        // TODO add your handling code here:
        btn_XuatFile.setBackground(Color.yellow);
        btn_XuatFile.setForeground(Color.blue);
        btn_XuatFile.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_XuatFileMouseEntered

    private void btn_XuatFileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_XuatFileMouseExited
        // TODO add your handling code here:
        btn_XuatFile.setBackground(new Color(51, 51, 255));
        btn_XuatFile.setForeground(Color.white);
    }//GEN-LAST:event_btn_XuatFileMouseExited

    private void btn_XuatFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_XuatFileActionPerformed
        // TODO add your handling code here:
        xuatFile();
    }//GEN-LAST:event_btn_XuatFileActionPerformed

    private void chk_VATItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_VATItemStateChanged
        // TODO add your handling code here:
        tinhTongTien();
    }//GEN-LAST:event_chk_VATItemStateChanged

    private void txt_ChietKhauFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_ChietKhauFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txt_ChietKhauFocusLost

    private void txt_ChietKhauKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_ChietKhauKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (txt_ChietKhau.getText().length() == 4 || (!(Character.isDigit(c)) && c != '.')){
            evt.consume();
        }
    }//GEN-LAST:event_txt_ChietKhauKeyTyped

    private void txt_ChietKhauKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_ChietKhauKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tinhTongTien();
            if (txt_ChietKhau.getText().isEmpty())
                txt_ChietKhau.setText("0");
        }
    }//GEN-LAST:event_txt_ChietKhauKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuNhapJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuNhapJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuNhapJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThemMoiPhieuNhapJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThemMoiPhieuNhapJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btg_LoaiPhieuHuy;
    private javax.swing.JButton btn_CapNhatDanhSach;
    private javax.swing.JButton btn_NhapHang;
    private javax.swing.JButton btn_XoaDanhSach;
    private javax.swing.JButton btn_XuatFile;
    private javax.swing.JCheckBox chk_VAT;
    private javax.swing.JComboBox<String> cmb_NhaCungCap;
    private javax.swing.JComboBox<String> cmb_NhomHang;
    private com.toedter.calendar.JDateChooser dat_NgayNhap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_ChietKhau;
    private javax.swing.JLabel lbl_GhiChu;
    private javax.swing.JLabel lbl_MaChungTu;
    private javax.swing.JLabel lbl_MaNhanVien;
    private javax.swing.JLabel lbl_NCC;
    private javax.swing.JLabel lbl_NgayHuy;
    private javax.swing.JLabel lbl_ThanhTien;
    private javax.swing.JLabel lbl_TongCong;
    private javax.swing.JLabel lbl_TongSoLuong;
    private javax.swing.JPanel pnl_CotPhai;
    private javax.swing.JPanel pnl_CotTrai;
    private javax.swing.JPanel pnl_DanhSachSanPham;
    private javax.swing.JPanel pnl_DonHang;
    private javax.swing.JTabbedPane tab_ChiTietPhieu;
    private javax.swing.JTable tbl_ChiTietPhieuNhap;
    private javax.swing.JTable tbl_DanhSachSanPham;
    private javax.swing.JTextArea txa_GhiChu;
    private javax.swing.JTextField txt_ChietKhau;
    private javax.swing.JTextField txt_MaChungTu;
    private javax.swing.JTextField txt_MaNhanVien;
    private javax.swing.JTextField txt_ThanhTien;
    private javax.swing.JTextField txt_TimKiemSanPham;
    private javax.swing.JTextField txt_TongCong;
    private javax.swing.JTextField txt_TongSoLuong;
    // End of variables declaration//GEN-END:variables

    NhomHangDAO NhomHangDAO = new NhomHangDAO();
    SanPhamDAO SanPhamDAO = new SanPhamDAO();
    DonViTinhDAO DVTDAO = new DonViTinhDAO();
    PhieuNhapDAO PhieuNhapDAO = new PhieuNhapDAO();
    PhieuNhapChiTietDAO PNCTDAO = new PhieuNhapChiTietDAO();
    NhaCungCapDAO NCCDAO = new NhaCungCapDAO();
    NguoiDungDAO NguoiDungDAO = new NguoiDungDAO();
    
    // Định dạng hiển thị số tiền:
    DecimalFormat dcf = new DecimalFormat("###,###,###.###");
    
    // Tạo treemap chứa sản phẩm, số lượng và giá nhập
    static TreeMap<SanPham, List<String>> DSSP = new TreeMap<>();
    
    // TreeMap chứa sản phẩm và vốn sau điều chỉnh
    static TreeMap<SanPham, Float> DSDieuChinhVon = new TreeMap<>();
    
    // TreeMap chứa sản phẩm và HSD Mới
    static TreeMap<SanPham, String> DSDieuChinhHSDMoi = new TreeMap<>();
    
    /*
     * Hàm khởi tạo các giá trị ban đầu cho JFrame
     */
    void inIt() {
        setTitle("Thêm mới phiếu nhập");
        setResizable(false);
        setLocationRelativeTo(null);
        doNhomHang();
        doDanhSachSanPham();
        doThongTin();
    }
    
    /*
     * Hàm đổ các thông tin mặc định 
     */
    void doThongTin() {
        try {
            // mã nhân viên
            txt_MaNhanVien.setText(ShareHelper.NguoiDung.getTenDangNhap());
            // mã phiếu nhập
            int demPhieuNhap = PhieuNhapDAO.demPhieuNhap();
            String MaPN = "PN" + (demPhieuNhap + 1);
            txt_MaChungTu.setText(MaPN);
            // ngay nhap
            dat_NgayNhap.setDate(DateHelper.now());
            // NCC: chi hien thi nhung NCC co trang thai dang giao dich
            doNhaCungCap();
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
    /*
     * Hàm đổ danh sách các NCC vào combobox (trạng thái đang giao dịch)
     */
    void doNhaCungCap() {
        DefaultComboBoxModel dcm = (DefaultComboBoxModel) cmb_NhaCungCap.getModel();
        dcm.removeAllElements();
        try {
            List<NhaCungCap> listNCC = NCCDAO.locTheoTrangThai(1);
            for (NhaCungCap NCC : listNCC) {
                dcm.addElement(NCC);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi truy vấn: " + e.toString());
        }
    }
    
    
    /*
     * Hàm này đổ danh sách nhóm hàng vào combobox ở tab DanhSachSanPham
     */
    void doNhomHang() {
        DefaultComboBoxModel dcm = (DefaultComboBoxModel) cmb_NhomHang.getModel();
        dcm.removeAllElements();
        try {
            List<NhomHang> ListNH = NhomHangDAO.select();
            dcm.addElement("Tất cả");
            for (NhomHang NH : ListNH) {
                dcm.addElement(NH);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi truy vấn: " + e.toString());
        }
    }
    
    /*
     * Hàm này đổ danh sách sản phẩm vào tab Danh Sách Sản Phẩm
     */
    void doDanhSachSanPham() {
        try {
            List<SanPham> ListSP = SanPhamDAO.select();
            doDuLieuSanPham(ListSP);
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi truy vấn: " + e.toString());
        }
    }
    
    /*
     * Hàm này tìm sản phẩm ở tab DANH SÁCH SẢN PHẨM
     */
    void timSanPham() {
        List<SanPham> list;
        // get tên nhóm hàng và mã nhóm hàng
        String TuyChonNhomHang = cmb_NhomHang.getSelectedItem().toString();
        // get chuỗi tìm kiếm
        String ChuoiTimKiem = txt_TimKiemSanPham.getText();
        // nếu chuỗi rỗng thì đổ tất cả sản phẩm theo mã nhóm
        if (ChuoiTimKiem.isEmpty()) {
            // nếu tên nhóm hàng là TẤT CẢ thì truy vấn tất cả
            if (TuyChonNhomHang.equalsIgnoreCase("Tất cả")) {
                try {
                    list = SanPhamDAO.select();
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            } else {
                try {
                    NhomHang NhomHang = NhomHangDAO.timMaNhom(TuyChonNhomHang);
                    String MaNhom = NhomHang.getMaNhomHang();
                    list = SanPhamDAO.timTheoMaNhom(MaNhom);
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            }
        } else {
            // nếu tên nhóm hàng là TẤT CẢ thì truy vấn tất cả
            if (TuyChonNhomHang.equalsIgnoreCase("Tất cả")) {
                try {
                    list = SanPhamDAO.timSanPhamTheoTen(ChuoiTimKiem);
                    doDuLieuSanPham(list);
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            } else {
                try {
                    NhomHang NhomHang = NhomHangDAO.timMaNhom(TuyChonNhomHang);
                    String MaNhom = NhomHang.getMaNhomHang();
                    list = SanPhamDAO.timKetHopNhomHang(ChuoiTimKiem, MaNhom);
                    if (list != null) {
                        doDuLieuSanPham(list);
                    }
                } catch (Exception e) {
                    DialogHelper.alert(this, "Lỗi truy vấn:" + e.toString());
                }
            }
        }
    }
    
    /*
     * Hàm thao tác đổ dữ liệu lên bảng Sản Phẩm
     */
    void doDuLieuSanPham(List<SanPham> list) {
        DefaultTableModel dtm = (DefaultTableModel) tbl_DanhSachSanPham.getModel();
        dtm.setRowCount(0);
        int STT = 0;
        for (SanPham sp : list) {
            STT++;
            NhaCungCap NCC = NCCDAO.timTheoMa(sp.getMaNCC());
            Object[] row = {
                STT,
                sp.getMaSanPham(),
                sp.getTenSanPham(),
                NCC.getTenNCC(),
                sp.getTonKho(),
                dcf.format(sp.getGiaVon()),
                dcf.format(sp.getGiaBan())
            };
            dtm.addRow(row);
        }
    }
    
    /*
     * Hàm thêm sản phẩm ở tbl_DSSP vào tab chi tiết phiếu nhập
     */
    void themSanPham() {
        int index = tbl_DanhSachSanPham.getSelectedRow();
        String MaSP = tbl_DanhSachSanPham.getValueAt(index, 1).toString();
        try {
            SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
            // check trong TreeMap có SP chưa, nếu có thì hiện thông báo, chưa thì add vào
            if (DSSP.containsKey(SP)) 
                DialogHelper.alert(this, "Sản phẩm đã có trong danh sách nhập");
            else {
                List<String> list = new ArrayList<>();
                list.add("0");
                list.add("0.0");
                DSSP.put(SP, list);
                capnhatDanhSachNhap();
                tab_ChiTietPhieu.setSelectedIndex(0);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
    /*
     * Hàm cập nhật danh sách hàng nhập
     */
    void capnhatDanhSachNhap() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_ChiTietPhieuNhap.getModel();
        dtm.setRowCount(0);
        DSDieuChinhVon.clear();
        int STT = 1;
        for (SanPham SP : DSSP.keySet()) {
            DonViTinh DVT = DVTDAO.timTheoMa(SP.getMaDVT());
            int SoLuong = Integer.parseInt(DSSP.get(SP).get(0));
            float GiaNhap = Float.parseFloat(DSSP.get(SP).get(1));
            String HSDMoiNhat = "";
            // cập nhật danh sách SP cần điều chỉnh HSD
            if (DSSP.get(SP).size() == 3) {
                HSDMoiNhat = DSSP.get(SP).get(2);
                if (SP.getHSDMoiNhat() != null || SP.getHSDMoiNhat().before(DateHelper.toDate(HSDMoiNhat, "yyyy-MM-dd"))) {
                    DSDieuChinhHSDMoi.put(SP, HSDMoiNhat);
                }
            }
            float VonSauDieuChinh = 0;
            /*
             * Tính giá vốn sau điều chỉnh: MAC = (A+B)/C
             *      MAC: giá vốn sản phẩm theo bình quân tức thời (giá vốn hiện tại)
             *      A: Giá trị kho trước nhập = Tồn kho trước nhập * MAC trước nhập
             *      B: Giá trị kho nhập mới = Tồn nhập mới * giá nhập mới
             *      C: tổng tồn = tồn trước nhập + tồn sau nhập
             */
            if (GiaNhap > 0 && SoLuong > 0) {
                float A = SP.getTonKho() * SP.getGiaVon();
                float B = GiaNhap * SoLuong;
                int C = SP.getTonKho() + SoLuong;
                VonSauDieuChinh = (A+B)/C;
                // cập nhật danh sách sản phẩm cần điều chỉnh giá vốn
                DSDieuChinhVon.put(SP, VonSauDieuChinh);
            }
            Object[] row = {STT++,
                            SP.getMaSanPham(),
                            SP.getTenSanPham(),
                            DVT.getMoTa(),
                            HSDMoiNhat,
                            SoLuong,
                            GiaNhap,
                            dcf.format(SoLuong*GiaNhap),
                            dcf.format(SP.getGiaVon()),
                            dcf.format(VonSauDieuChinh)};
            dtm.addRow(row);
        }
    }
    
    /*
     * Hàm nhập số lượng cần nhập và giá nhập vào bảng
           sau khi nhập thì cập nhật lại bảng
     */
    void nhapThongTinNhapHang() {
        try {
            int index = tbl_ChiTietPhieuNhap.getEditingRow();
            if (index >= 0) {
                String MaSP = tbl_ChiTietPhieuNhap.getValueAt(index, 1).toString();
                SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
                String SLNhap = tbl_ChiTietPhieuNhap.getValueAt(index, 5).toString();
                String GiaNhap = tbl_ChiTietPhieuNhap.getValueAt(index, 6).toString();
                String HSDMoi = "";
                if (!tbl_ChiTietPhieuNhap.getValueAt(index, 4).toString().isEmpty()) {
                    HSDMoi = tbl_ChiTietPhieuNhap.getValueAt(index, 4).toString();
                }
                List<String> listThongTin = new ArrayList<>();
                listThongTin.add(SLNhap);
                listThongTin.add(GiaNhap);
                if (!HSDMoi.isEmpty())
                    listThongTin.add(HSDMoi);
                DSSP.put(SP, listThongTin);
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Lỗi nhập liệu");
        }
        finally {
            capnhatDanhSachNhap();
            tinhTongSoLuongNhap();
            tinhTongGiaTriNhap();
            tinhTongTien();
        }
    }
    
    /*
     * Hàm cập nhật tổng số lượng nhập
     */
    void tinhTongSoLuongNhap() {
        int TongSLNhap = 0;
        for (SanPham SP : DSSP.keySet()) {
            TongSLNhap += Integer.parseInt(DSSP.get(SP).get(0));
        }
        txt_TongSoLuong.setText(TongSLNhap+"");
    }
    
    /*
     * Hàm cập nhật tổng giá trị nhập
     */
    void tinhTongGiaTriNhap() {
        float TongGTNhap = 0;
        for (SanPham SP : DSSP.keySet()) {
            int SL = Integer.parseInt(DSSP.get(SP).get(0));
            float GiaNhap = Float.parseFloat(DSSP.get(SP).get(1));
            TongGTNhap += SL * GiaNhap;
        }
        txt_ThanhTien.setText(TongGTNhap+"");
    }
    
    /*
     * Hàm tính tổng tiền cuối cùng (bao gồm chiết khấu + VAT)
     */
    void tinhTongTien() {
        float TienTamTinh = Float.parseFloat(txt_ThanhTien.getText());
        float ChietKhau = 0f;
        if (!txt_ChietKhau.getText().isEmpty() && !txt_ChietKhau.getText().equals("0")) 
            ChietKhau = Float.parseFloat(txt_ChietKhau.getText());
        float VAT = (chk_VAT.isSelected() ? 0.1f : 0);
        float TongTien = 0f;
        if (TienTamTinh > 0) {
            // TongTien = (TienTamTinh - GiaTriChietKhau) + (TienTamTinh - GiaTriChietKhau)*VAT
            TongTien = (TienTamTinh - TienTamTinh*ChietKhau/100) + (TienTamTinh - TienTamTinh*ChietKhau/100)*VAT;
        }
        txt_TongCong.setText(TongTien+"");
    }
    
    /*
     * Hàm xoá hết sản phẩm trong danh sách nhập
     */ 
    void xoaDanhSachNhap() {
        DSSP.clear();
        capnhatDanhSachNhap();
        tinhTongGiaTriNhap();
        tinhTongSoLuongNhap();
        tinhTongTien();
    }
    
    /*
     * Hàm check ghi chú: không được để trống, tối thiểu phải đủ 3 ký tự
     */
    boolean kiemGhiChu() {
        return txa_GhiChu.getText().length() >= 3;
    }
    
    /*
     * Hàm kiểm tra dssp 
           - có null hay không, null thì không được phép hoàn tất
     */
    boolean kiemDSSP() {
        return !DSSP.isEmpty();
    }
    
    /*
     * Hàm kiểm tra số lượng hàng nhập và giá nhập
           nếu có SP có SL = 0 hoặc giá nhập = 0 thì trả về false
     */
    boolean kiemSoLuongThucTe() {
        for (SanPham SP : DSSP.keySet()) {
            if (Integer.parseInt(DSSP.get(SP).get(0)) == 0 
                    || Float.parseFloat(DSSP.get(SP).get(1)) == 0)
                return false;
        }
        return true;
    }
    
    /*
     * Hàm lưu phiếu nhập, cân bằng kho và cập nhật lại giá vốn
     */
    void themPhieuNhap() {
        if (xetDangNhap() && kiemGhiChu() && kiemDSSP() && kiemSoLuongThucTe()) {
            PhieuNhap PN = taoPhieuNhap();
            try {
                int rs = PhieuNhapDAO.themPhieuNhap(PN);
                if (rs > 0) {
                    themPNCT(PN);
                    canbangTonKho();
                    capnhatGiaVon();
                    capnhatHSDMoi();
                    DialogHelper.alert(this, "Đã hoàn tất quá trình nhập hàng");
                    xoaDanhSachNhap();
                    if (capnhatFrameDSPhieuNhap()) {
                        this.dispose();
                        new DanhSachPhieuNhapJFrame().setVisible(true);
                    }
                    else 
                        this.dispose();
                }
                else
                    DialogHelper.alert(this, "Thêm mới thất bại");
            } catch (Exception e) {
                DialogHelper.alert(this, "Có lỗi: " + e.toString());
            }
        }
        else {
            DialogHelper.alert(this, "Kiểm tra lại các thông tin");
        }
    }
    
    /*
     * Hàm cập nhật lại tồn kho của SP (cân bằng kho hàng)
     */
    void canbangTonKho() throws SQLException {
        for (SanPham SP : DSSP.keySet()) {
            int TonKhoMoi = SP.getTonKho() + Integer.parseInt(DSSP.get(SP).get(0));
            SanPhamDAO.capnhatTonKho(SP.getMaSanPham(), TonKhoMoi);
        }
    }
    
    /*
     * Hàm cập nhật lại giá vốn của SP
     */
    void capnhatGiaVon() throws SQLException {
        for (SanPham SP : DSDieuChinhVon.keySet()) {
            float GiaVonMoi = DSDieuChinhVon.get(SP);
            SanPhamDAO.capnhatGiaVon(SP.getMaSanPham(), GiaVonMoi);
        }
    }
    
    /*
     * Hàm cập nhật lại HSD mới của SP
     */
    void capnhatHSDMoi() throws SQLException {
        for (SanPham SP : DSDieuChinhHSDMoi.keySet()) {
            String HSDMoi = DSDieuChinhHSDMoi.get(SP);
            SanPhamDAO.capnhatHSDMoi(SP.getMaSanPham(), DateHelper.toDate(HSDMoi, "yyyy-MM-dd"));
        }
    }
    
    /*
     * Hàm thêm PNCT
     */
    void themPNCT(PhieuNhap PN) {
        for (SanPham SP : DSSP.keySet()) {
            PhieuNhapChiTiet PNCT = new PhieuNhapChiTiet();
            PNCT.setMaPhieuNhap(PN.getMaPhieuNhap());
            PNCT.setMaSanPham(SP.getMaSanPham());
            PNCT.setSoLuong(Integer.parseInt(DSSP.get(SP).get(0)));
            PNCT.setGiaNhap(Float.parseFloat(DSSP.get(SP).get(1)));
            float ThanhTien = Integer.parseInt(DSSP.get(SP).get(0))*Float.parseFloat(DSSP.get(SP).get(1));
            PNCT.setThanhTien(ThanhTien);
            if (DSDieuChinhHSDMoi.containsKey(SP)) {
                PNCT.setHSDMoiNhat(DateHelper.toDate(DSDieuChinhHSDMoi.get(SP), "yyyy-MM-dd"));
            }
            PNCTDAO.themPNCT(PNCT);
        }
    }

    /*
     * Hàm kiểm tra đăng nhập
     */
    boolean xetDangNhap() {
        return ShareHelper.NguoiDung != null;
    }
    
    /*
     * Hàm tạo model Phiếu Nhập Hàng
     */
    PhieuNhap taoPhieuNhap() {
        PhieuNhap PN = new PhieuNhap();
        PN.setMaPhieuNhap(txt_MaChungTu.getText().trim());
        PN.setMaNhanVien(txt_MaNhanVien.getText().trim());
        PN.setNgayNhap(dat_NgayNhap.getDate());
        PN.setMaNCC(((NhaCungCap)cmb_NhaCungCap.getSelectedItem()).getMaNCC());
        PN.setTongSoLuong(Integer.parseInt(txt_TongSoLuong.getText()));
        PN.setChietKhau(Float.parseFloat(txt_ChietKhau.getText()));
        float VAT = (chk_VAT.isSelected() ? 10f : 0f);
        PN.setVAT(VAT);
        PN.setThanhTien(Float.parseFloat(txt_TongCong.getText()));
        PN.setGhiChu(txa_GhiChu.getText());
        return PN;
    }
    
    /*
     * Hàm thoát frame thêm mới và cập nhật lại frame xuất huỷ hàng
     */
    boolean capnhatFrameDSPhieuNhap(){
        Frame[] listFrames = Frame.getFrames();
        for (Frame fr : listFrames) {
            String tenFrame = fr.getClass().getName();
            if (tenFrame.equalsIgnoreCase("ui.quanly.giaodich.nhaphang.DanhSachPhieuNhapJFrame")) {
                fr.dispose();
                return true;
            }
        }
        return false;
    }
    
    /*
     * Hàm xoá sản phẩm trong danh sách nhập hàng khi click chọn
     */
    void xoaSanPham() {
        int index = tbl_ChiTietPhieuNhap.getSelectedRow();
        String MaSP = tbl_ChiTietPhieuNhap.getValueAt(index, 1).toString();
        try {
            SanPham SP = SanPhamDAO.timTheoMaSP(MaSP);
            if (DialogHelper.confirm(this, "Xoá sản phẩm " + MaSP + " khỏi danh sách nhập hàng?")) {
                DSSP.remove(SP);
                capnhatDanhSachNhap();
                tinhTongSoLuongNhap();
                tinhTongGiaTriNhap();
                tinhTongTien();
            }
        } catch (Exception e) {
            DialogHelper.alert(this, "Có lỗi: " + e.toString());
        }
    }
    
    void xuatFile() {
        String[] columns = {"STT", "Mã SP", "Tên SP", "ĐVT", "HSD", "Số lượng", "Giá nhập", "Thành tiền"};
        JFileChooser excelFileChooser = new JFileChooser();
        excelFileChooser.setDialogTitle("Save as");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlxs");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            FileOutputStream excelFOU = null;
            BufferedOutputStream excelBOU = null;
            XSSFWorkbook excelJTableExporter = null;
            Row row = null;
            Cell cell = null;
            try {
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                // xét font cho header 
                XSSFFont headerFont = excelJTableExporter.createFont();
                headerFont.setBold(true); // in đậm
                headerFont.setFontHeightInPoints((short) 14);
                // xét font cho title chính
                XSSFFont titleFont = excelJTableExporter.createFont();
                titleFont.setBold(true);
                titleFont.setFontHeightInPoints((short) 18);
                titleFont.setColor(IndexedColors.BLUE.getIndex());
                //
                XSSFFont tieuDePhuFont = excelJTableExporter.createFont();
                tieuDePhuFont.setBold(true);
                tieuDePhuFont.setFontHeightInPoints((short) 12);
                tieuDePhuFont.setColor(IndexedColors.BLUE.getIndex());
                // cellStyle cua header bảng
                CellStyle headerCellStyle = excelJTableExporter.createCellStyle();
                headerCellStyle.setFont(headerFont);
                headerCellStyle.setFillForegroundColor(IndexedColors.AQUA.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                headerCellStyle.setBorderTop(BorderStyle.MEDIUM);
                headerCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                headerCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // cellStyle của bảng
                CellStyle tableCellStyle = excelJTableExporter.createCellStyle();
                tableCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                tableCellStyle.setBorderTop(BorderStyle.MEDIUM);
                tableCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                tableCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // test for
                for (int i = 0; i < tbl_ChiTietPhieuNhap.getRowCount() + 10; i++) {
                    row = excelSheet.createRow(i);
                    for (int j = 0; j < tbl_ChiTietPhieuNhap.getColumnCount(); j++) {
                        cell = row.createCell(j);
                        if (i == 0 && j == 0) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue("PHIẾU NHẬP KHO HÀNG");
                            titleCellStyle.setFont(titleFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.CENTER); // xét nằm giữa
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(0, 0, 0, columns.length - 1)); // gộp dòng
                        }
                        if (i == 1 && j == 0) {
                            CellStyle NgayThongKeCellStyle = excelJTableExporter.createCellStyle(); // tạo cellStyle để định dạng
                            String NgayThangNam = DateHelper.toString(DateHelper.now(), "dd-MM-yyyy");
                            String Ngay = NgayThangNam.substring(0, 2);
                            String Thang = NgayThangNam.substring(3, 5);
                            String Nam = NgayThangNam.substring(6, 10);
                            cell.setCellValue("Ngày " + Ngay + " tháng " + Thang + " năm " + Nam);
                            NgayThongKeCellStyle.setAlignment(HorizontalAlignment.CENTER); // xét nằm giữa
                            NgayThongKeCellStyle.setFont(tieuDePhuFont);
                            cell.setCellStyle(NgayThongKeCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(1, 1, 0, columns.length - 1)); // gộp dòng
                        }
                        if (i == 2 && j == 0) {
                            CellStyle SoPhieuCellStyle = excelJTableExporter.createCellStyle(); // tạo cellStyle để định dạng
                            String MaPhieuNhap = txt_MaChungTu.getText();
                            cell.setCellValue("Số phiếu: " + MaPhieuNhap);
                            SoPhieuCellStyle.setAlignment(HorizontalAlignment.CENTER); // xét nằm giữa
                            SoPhieuCellStyle.setFont(tieuDePhuFont);
                            cell.setCellStyle(SoPhieuCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(2, 2, 0, columns.length - 1)); // gộp dòng
                        }
                        
                        if (i == 4 && j == 5) {
                            CellStyle TongSoLuongCellStyle = excelJTableExporter.createCellStyle(); // tạo cellStyle để định dạng
                            TongSoLuongCellStyle.setFont(tieuDePhuFont);
                            TongSoLuongCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(TongSoLuongCellStyle);
                            int TongSL = Integer.parseInt(txt_TongSoLuong.getText());
                            cell.setCellValue("Tổng số lượng: " + TongSL);
                            excelSheet.addMergedRegion(new CellRangeAddress(4, 4, 5, columns.length - 1)); // gộp dòng                       
                        }
                    }
                }
                
                // xét vị trí giá trị cho header bảng
                row = excelSheet.createRow(5);
                for (int i = 0; i < columns.length; i++) {
                    cell = row.createCell(i);
                    cell.setCellValue(columns[i]);
                    cell.setCellStyle(headerCellStyle);
                }
                // xet vị trí giá trị cho bảng
                for (int i = 0; i < tbl_ChiTietPhieuNhap.getRowCount(); i++) {
                    row = excelSheet.createRow(i + 6);
                    for (int j = 0; j < tbl_ChiTietPhieuNhap.getColumnCount() - 2; j++) {
                        cell = row.createCell(j);
                        cell.setCellValue(tbl_ChiTietPhieuNhap.getValueAt(i, j).toString());
                        cell.setCellStyle(tableCellStyle);
                        // xet size cho cot
                        excelSheet.autoSizeColumn(i);
                        excelSheet.autoSizeColumn(i + 1);
                    }
                }
                
                // các giá trị thống kê
                for (int i = 0; i < tbl_ChiTietPhieuNhap.getRowCount()+30; i++) {
                    row = excelSheet.createRow(i + 6 + tbl_ChiTietPhieuNhap.getRowCount());
                    for (int j = 0; j < tbl_ChiTietPhieuNhap.getColumnCount() - 2; j++) {
                        cell = row.createCell(j);
                        if (i == 0 && j == 4) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue("Tạm tính");
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(6 + tbl_ChiTietPhieuNhap.getRowCount(), 6 + tbl_ChiTietPhieuNhap.getRowCount(), 4, 5)); // gộp dòng
                        }
                        
                        if (i == 0 && j == 6) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue(txt_ThanhTien.getText());
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(6 + tbl_ChiTietPhieuNhap.getRowCount(), 6 + tbl_ChiTietPhieuNhap.getRowCount(), 6, 7)); // gộp dòng
                        }
                        
                        if (i == 1 && j == 4) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue("Chiết khấu (%)");
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(7 + tbl_ChiTietPhieuNhap.getRowCount(), 7 + tbl_ChiTietPhieuNhap.getRowCount(), 4, 5)); // gộp dòng
                        }
                        
                        if (i == 1 && j == 6) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue(txt_ChietKhau.getText());
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(7 + tbl_ChiTietPhieuNhap.getRowCount(), 7 + tbl_ChiTietPhieuNhap.getRowCount(), 6, 7)); // gộp dòng
                        }
                        
                        if (i == 2 && j == 4) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue("VAT (%)");
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(8 + tbl_ChiTietPhieuNhap.getRowCount(), 8 + tbl_ChiTietPhieuNhap.getRowCount(), 4, 5)); // gộp dòng
                        }
                        
                        if (i == 2 && j == 6) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            String VAT = (chk_VAT.isSelected() ? "10" : "0");
                            cell.setCellValue(VAT);
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(8 + tbl_ChiTietPhieuNhap.getRowCount(), 8 + tbl_ChiTietPhieuNhap.getRowCount(), 6, 7)); // gộp dòng
                        }
                        
                        if (i == 3 && j == 4) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue("Tổng thanh toán");
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(9 + tbl_ChiTietPhieuNhap.getRowCount(), 9 + tbl_ChiTietPhieuNhap.getRowCount(), 4, 5)); // gộp dòng
                        }
                        
                        if (i == 3 && j == 6) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            cell.setCellValue(txt_TongCong.getText());
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(9 + tbl_ChiTietPhieuNhap.getRowCount(), 9 + tbl_ChiTietPhieuNhap.getRowCount(), 6, 7)); // gộp dòng
                        }
                        
                        if (i == 5 && j == 3) {
                            CellStyle titleCellStyle = excelJTableExporter.createCellStyle();
                            NguoiDung ND = NguoiDungDAO.timTenDangNhap(txt_MaNhanVien.getText());
                            cell.setCellValue("Người lập phiếu: " + ND.getHoTen());
                            titleCellStyle.setFont(tieuDePhuFont); // add font vào cell
                            titleCellStyle.setAlignment(HorizontalAlignment.RIGHT);
                            cell.setCellStyle(titleCellStyle);
                            excelSheet.addMergedRegion(new CellRangeAddress(11 + tbl_ChiTietPhieuNhap.getRowCount(), 11 + tbl_ChiTietPhieuNhap.getRowCount(), 4, 7)); // gộp dòng
                        }
                    }
                }
                
                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(this, "Đã xuất file");
            } catch (Exception e) {
                DialogHelper.alert(this, "Có lỗi: " + e.toString());
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                    excelFOU.close();
                } catch (Exception e) {
                    DialogHelper.alert(this, "Có lỗi: " + e.toString());
                }
            }
        }
    }
    
}